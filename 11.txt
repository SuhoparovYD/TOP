#include <iostream>
#include <string>

//1. Реализация шифра Цезаря

using namespace std;

char encryptCaesar(char c, int tShift, int alphabetLength=26) {

	// только для обнобайтных символов

	if (tShift == 0) return c;  	
	if (tShift > alphabetLength) tShift %= alphabetLength;
	if (tShift < -alphabetLength)  tShift = -((- tShift) % alphabetLength);

	if (tShift > 0) {
		if (c >= 'A' && c <= 'Z') {
			if (tShift <= 'Z' - c)  c += tShift;
			else c += (tShift - alphabetLength);
		}
		if (c >= 'a' && c <= 'z') {
			if (tShift <= 'z' - c)  c += tShift;
			else c += (tShift - alphabetLength);
		}
	} else {									// tShift  < 0
		if (c >= 'A' && c <= 'Z') {
			if (tShift >= 'A' - c)  c += tShift;
			else c += (tShift + alphabetLength);
		}
		if (c >= 'a' && c <= 'z') {
			if (tShift >= 'a' - c)  c += tShift;
			else c += (tShift + alphabetLength);
		}
	}
	return c;

}


char decryptCaesar(char c, int tShift) {
	return encryptCaesar(c, -tShift);
}


// test

int main() {

	using namespace std;


	string originalText, encryptedText ="", decryptedText = "";

	originalText = "The quick brown fox jumps over the lazy dog";

	for (int i = 0; i < originalText.size(); i++)
		encryptedText += encryptCaesar(originalText[i], 5);

	cout << encryptedText  << "\n";

	for (int i = 0; i < originalText.size(); i++)
		decryptedText += decryptCaesar(encryptedText[i], 5);

	cout << decryptedText << "\n\n";


	originalText = "Lorem ipsum dolor sit amet consectetur adipiscing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est laborum";
	encryptedText = ""; decryptedText = "";

	for (int i = 0; i < originalText.size(); i++)
		encryptedText += encryptCaesar(originalText[i], 5);

	cout << encryptedText << "\n";

	for (int i = 0; i < originalText.size(); i++)
		decryptedText += decryptCaesar(encryptedText[i], 5);

	cout << decryptedText << "\n";

	return 0;
}



//В древности для шифрования сообщений использовался такой способ : 
// все буквы в сообщении сдвигались на одно и то же число позиций в алфавите.
// Число позиций могло быть как положительным, так и отрицательным и являлось
//  параметром шифра.Если для сдвига на данное число позиций алфавита не хватает,
//  то он зацикливается(то есть буква с номером 27 — это снова буква «a», буква с
//  номером 28 — это «b» и так далее).
//
//Например, слово abracadabra при сдвиге на 10 позиций превратится в
//  klbkmknklbk.Этот простейший шифр называется шифром Цезаря.Регистр 
// букв(заглавные и строчные) менять не нужно.Напишите функцию encrypt_caesar
//  от строки и числа, которая возвращает исходную строку, зашифрованную шифром 
// Цезаря с параметром, равным данному числу.Также напишите функцию decrypt_caesar,
//  выполняющую обратное преобразование.Считаем, что входные строки состоят лишь из
//  английских букв; если там содержатся и другие символы, то их надо игнорировать.
//

//Пример 1
//The quick brown fox jumps over the lazy dog
//Ymj vznhp gwtbs ktc ozrux tajw ymj qfed itl





#include <iostream>
#include <string>

//2. Проверка корректности email-адреса

int emailCheck(std::string emailAdress) {
    using namespace std;

    int countPoints = 0, countAt = 0, numChar=0;
    int wrongCh;

    string correctСhar = "qwertyuiopasdfghjklzxcvbnm-1234567890. ";
    string specialСhar = "!#$%& '*+-/=?^_`{|}~";

    if (emailAdress[0] == '.' || emailAdress[0] == '@' || emailAdress[0] == '-') return -1;

    int l = emailAdress.size() - 1;
    if (emailAdress[l] == '.' || emailAdress[l] == '@' ) return -1;

    for (char ea : emailAdress) {

        numChar++;
        if (ea >= 'A' && ea <= 'Z')  ea |= 0x20; //to lower case

        if (ea == '.') {
            if (countPoints) return -1;   // 2 .
            else countPoints++;
        }
        else countPoints = 0;

        if (ea == '@') {
            if (countAt || numChar > 65) return -1;   // 2 @ || i > 64
            else  countAt++;
        }
        else {
            wrongCh = 1;
            for (char cc : correctСhar) 
                if (cc == ea) {
                    wrongCh = 0;
                   //cout << cc << "-" << ea << "=" << wrongCh << " ";
                    break;
            }

            if (wrongCh) return -1;

            if (countAt) {       // после @
                wrongCh = 1;
                for (char cc : correctСhar + specialСhar) if (cc == ea) {
                    wrongCh = 0; break;
                }

                if (wrongCh) return -1;
            }

        }


    }

    if (!countAt) return -1;
    return 0;
}

int main()  {
    using namespace std;
    // test
    string emailAdress[]{ "simple@example.com",      // корректные   адреса :
                          "very.common@example.com",
                          "disposable.style.email.with + symbol@example.com",
                          "other.email - with - hyphen@example.com",
                          "fully - qualified - domain@example.com",
                          "user.name + tag + sorting@example.com",           // + Некорректнj=o 
                          "x@example.com",
                          "example - indeed@strange - example.com",
                          "admin@mailserver1",
                          "example@s.example",
                          "mailhost!username@example.org",
                          "user % example.com@example.org",
        //Некорректные адреса :
                          ".doe@example.com",
                          "@example.com",
                          "-example.com",
                          "johnDoe@",
                          "johnoe@example.",
                          "Abc.example.com",
                          "A@b@c@example.com",
                          "a\"b(c)d,e:f;g<h>i[j\k]l@example.com",
                          "1234567890123456789012345678901234567890123456789012345678901234 + x@example.com",
                          "i_like_underscore@but_its_not_allow_in _this_part.example.com"
    };

    string yNo[] {"Yes", "No"};

    for (string em : emailAdress) {
        cout << em << " " << yNo[-emailCheck(em)] << "\n";
    }

    cout << "\n Введите email адрес:";

    string  emHand;
    getline(cin, emHand);
    cout << emHand << " " << yNo[-emailCheck(emHand)] << "\n";

    return 0;
}

/*

Напишите программу, которая проверяет корректность email - адреса, введённого пользователем.

Согласно международным требованиям, корректный email - адрес должен состоять из двух частей, 
разделённых знаком @.Первая часть должна иметь длину не менее одного и не более 64 символов, 
вторая часть — не менее одного и не более 63 символов.Из символов допускаются только английские 
буквы, цифры и знак « - »(дефис), а также точка.Точка не может быть первым или последним символом, 
а кроме того, две точки не могут идти подряд.В первой части(которая предшествует символу @), 
кроме вышеперечисленных, разрешены ещё следующие символы :   !#$%& '*+-/=?^_`{|}~
Пользователь вводит строку, задающую email - адрес.Программа должна вывести слово Yes, 
если адрес корректен, а в противном случае — слово No.

Корректные адреса:

simple@example.com

very.common@example.com

disposable.style.email.with+symbol@example.com

other.email-with-hyphen@example.com

fully-qualified-domain@example.com

user.name+tag+sorting@example.com

x@example.com 

example-indeed@strange-example.com

admin@mailserver1

example@s.example

mailhost!username@example.org

user%example.com@example.org



Некорректные адреса:

John..Doe@example.com (две точки не могут идти подряд)

Abc.example.com (нет символа @)

A@b@c@example.com (символ @ должен быть только один)

a"b(c)d,e:f;g<h>i[j\k]l@example.com (присутствуют недопустимые символы)

1234567890123456789012345678901234567890123456789012345678901234+x@example.com (первая часть длиннее 64 символов)

i_like_underscore@but_its_not_allow_in _this_part.example.com (во второй части присутствует недопустимый символ «_»)







*/



#include <iostream>
#include <string>

//3. Валидация IP - адреса

int ipCheck(std::string ipAdress) {

    using namespace std;

    int countPoint = 0;
    int countZero = 0, countGroup = 0, numChar = 0;
    int num=0;

    if (ipAdress[0] == '.' || ipAdress[ipAdress.size() - 1] == '.') return -1;

    for (char ia : ipAdress) {

        if ((ia < '0' || ia > '9') && ia !='.') return -1;

        if (ia == '.') {                           
            if (countPoint) return -1;            // 2 .
            else {                                // end of group
                if(num > 255) return -1;
                countGroup++;
                countPoint++;
                numChar = 0;
                countZero=0;
                num = 0;
            }

        }
        else   {                                // 0-9
            countPoint = 0;
            if (++numChar > 3) return -1;

            if (ia == '0') {
                countZero++;
                if (countZero > 1) return -1;
            }
            else {                              // 1-9
                if (countZero == 1) return -1;
                countZero = -1;
                num = num * 10 + ia - '0';      // чмсленное значение <= 255

            }
        }
    }

    if (countGroup !=3) return -1;;
    return 0;
}


int main()  {
    using namespace std;

    string ipAdress[]{ "127.0.0.1",      // корректные   адреса :
                       "255.255.255.255",
                       "1.2.3.4",
                       "55.77.213.101",
                                    //Некорректные адреса :
                       "255.256.255.255",
                       "0.55.33.22.",
                       "10.00.000.0",
                       "23.055.255.033",
                       "65.123..9",
                       "a.b.c.d"
    };

    string yNo[] {"Yes", "No"};

    for (string ip : ipAdress) {
        cout << ip << " " << yNo[-ipCheck(ip)] << "\n";
    }

    cout << "\n Введите ip адрес:";

    string  emHand;
    getline(cin, emHand);
    cout << emHand << " " << yNo[-ipCheck(emHand)] << "\n";

    return 0;
}

/*
3. Валидация IP - адреса

Что нужно сделать
Проверьте, задаёт ли введённая пользователем строка корректный IP - адрес четвёртой версии(IPv4).IP - адрес должен представлять из себя четыре числа, разделённые точками без пробелов, причём каждое число должно быть в диапазоне от 0 до 255 включительно.Числа не должны содержать ведущих нулей.Других символов в строке, кроме вышеописанных, присутствовать не должно.

Пользователь вводит строку, задающую ip - адрес.Программа должна вывести слово Yes, если адрес корректен, и слово No, если это не так.

Корректные :

127.0.0.1
255.255.255.255
1.2.3.4
55.77.213.101


Некорректные :

    255.256.257.258 (числа больше 255)
    0.55.33.22. (лишняя точка в конце)
    10.00.000.0 (лишние нули)
    23.055.255.033 (опять лишние нули)
    65.123..9 (две точки подряд)
    a.b.c.d(посторонние символы, помимо цифр и точек)
 */











#include <iostream>
#include <string>
#include <cctype>   // для функции isdigit

//3. Длинное вещественное число


bool chkNumber(std::string s) {

    bool point = false;
    int i = 0;
    if (s[i] == '-') i++;

    for (; i < s.size(); i++) {
        if (s[i] == '.') {
            if (point)                  //2 .
                return false;
            else  point = true;         //1 .
        }
        else {
            if (!isdigit(s[i]))  
                return false;
        }
    } // for

    return true;
}

struct realNumber {

    std::string fractionalPart;
    std::string integerPart;

};

realNumber rNum(std::string number) {
    realNumber rn;
    int i,f;
    long decimalPoint = number.find('.');
    if (decimalPoint != std::string::npos) {
        rn.integerPart = number.substr(0, decimalPoint);
        rn.fractionalPart = number.substr(decimalPoint + 1, number.size());
        for (f = 1, i = 0; i < rn.fractionalPart.size(); i++)
            if (rn.fractionalPart[i] != '0') {
                f = 0; break;
            }
        if(f) rn.fractionalPart = "";
    }
    else {
        rn.integerPart = number;
        rn.fractionalPart = "";
    }
    return rn;
}

int main() {
    using namespace std;

    string number1, number2 ;   //

    do {
        cout << "Введите 1-e вещественное число: ";
        cin >> number1;
    } while (!chkNumber(number1));

    do {
        cout << "Введите 2-e вещественное число: ";
        cin >> number2;
    } while (!chkNumber(number2));



    string result[] = { "Less",  "Equal", "More" };
    int cm, invers = 1;

    if (number1[0] == '-' and number2[0] != '-') cm = -1;
    else if (number1[0] != '-' and number2[0] == '-') cm = 1;
         else { 
            if (number1[0] == '-' and number2[0] == '-') invers = -1;
     
            realNumber rn1 = rNum(number1);
            realNumber rn2 = rNum(number2);

            if (rn1.integerPart.size() > rn2.integerPart.size()) cm = 1;
            else if (rn1.integerPart.size() < rn2.integerPart.size()) cm = -1;
            else  cm = rn1.integerPart.compare(rn2.integerPart);

            if (!cm) cm = rn1.fractionalPart.compare(rn2.fractionalPart);
            cm *= invers;
        }

    cout << "\nAnswer: " << result[cm+1] << "\n";

    return(0);
}



#include <iostream>
#include <string>

/* 4. Подсчет количества слов
*/

int main() {  
  using namespace std;
  
  string stringOfWords;
  
   cout << "Введите строку : " ;
   getline(cin, stringOfWords);
  
  int sumWords = 0; 
  int flag = 1;
  for(int i=0; i <stringOfWords.size() ; i++) {
    if(stringOfWords[i] != ' ') {    
      if(flag) sumWords ++;            
      flag = 0;   
      //cout << sumWords <<" "<< (char)stringOfWords[i] << ":"; // debug
    }
    else 
      if(!flag) flag = 1;
  }
  cout << sumWords;

  return 0;
}





//XXXXXX 0000000

#include <iostream>
#include <string>



bool chkStr(std::string s) {

    for (int i = 0; i < s.size(); i++) {
        if (s[i] == '.' || s[i] == '0' || s[i] == 'X');
            else  return false;         
    }

    return true;
}

// поиск линии
int win(std::string s[3], char z) {
    int i, wz=0;
    for (i = 0; i < 3; i++) 
        if (s[i][0] == z && s[i][1] == z && s[i][2] == z) wz++; 

    for (i = 0; i < 3; i++) 
        if (s[0][i] == z && s[1][i] == z && s[2][i] == z) wz++;

    if (s[0][0] == z && s[1][1] == z && s[2][2] == z) wz++;

    if (s[0][2] == z && s[1][1] == z && s[2][0] == z) wz++;

    return wz;
}

int sum(std::string s[3], char z) {
    int i, j, zsum = 0;
    for (i = 0; i < 3; i++)
        for (j = 0; j < 3; j++)
            if (s[i][j] == z ) zsum++;

    return zsum;
}


int main() {

    using namespace std;
    setlocale(LC_ALL, "Russian");

    string st[3];   //
    int i, j;
    int win0, winX;

    for(int i=0; i<3; i++)

        do {
            cout << "Введите " << i+1 << "-ю строку (.0X): ";
            cin >> st[i];
        } while (!chkStr(st[i]));      //На поле есть невалидные символы

        for (i = 0; i < 3; i++) {
            for (j = 0; j < 3; j++)
                cout << st[i][j] << " ";
            cout <<  "\n";
        }

        win0 = win(st, '0');
        winX = win(st, 'X');
        cout << win0 << " " << winX << "\n";

        if (win0 && winX) {             //Выявлено несколько победителей одновременно
            cout << "Incorrect\n";
            return -1;
        }

        int sum0 = sum(st, '0');
        int sumX = sum(st, 'X');

        if (win0 && sumX > sum0) {      //Нолики победили, а крестиков больше чем ноликов
            cout << "Incorrect\n";
            return -1;
        }

        if (winX && sum0 >= sumX) {     //Крестики победили, а ноликов столько же или больше
            cout << "Incorrect\n";
            return -1;
        }
        if (win0 > 1 && winX > 1) {     //Нолики и крестики победили несколько раз
            cout << "Incorrect\n";
            return -1;
        }

        if (abs(sum0 - sumX) >1) {     //|Крестики  - Нолики| > 1 
            cout << "Incorrect\n";
            return -1;
        }
  
    if(win0 > 0)
      cout << "\nVanya won\n";
    if(winX > 0)
      cout << "\nPetya won\n";
    else 
      cout << "\nNobody\n";
  return 1;
  }

//Выявлено несколько победителей одновременно
//Нолики победили, а крестиков больше чем ноликов
//Крестики победили, а ноликов столько же или больше
//Нолики и крестики победили несколько раз
//На поле есть невалидные символы




#include <iostream>

int main() {
    using namespace std;
    setlocale(LC_ALL, "Russian");

    int a = 1, b = 4;

    cout << a;

    b = ~a;

    cout << "\n" << b;

    return 0;
}
